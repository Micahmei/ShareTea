{"ast":null,"code":"// backend/routes/inventory.js\nconst express = require(\"express\");\nconst router = express.Router();\nconst pool = require(\"../db\");\n\n// 获取所有库存记录（包含 menuitem 名字）\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const result = await pool.query(`\n      SELECT \n        i.inventoryid,\n        i.quantity,\n        i.menuitemid,\n        m.itemname,\n        i.timestamp,\n        i.restockdate,\n        i.lastupdated\n      FROM inventory i\n      JOIN menuitem m ON i.menuitemid = m.itemid\n      ORDER BY i.inventoryid;\n    `);\n    res.json(result.rows);\n  } catch (err) {\n    console.error(\"Error fetching inventory:\", err);\n    res.status(500).json({\n      error: \"Failed to fetch inventory\"\n    });\n  }\n});\n\n// 添加库存记录\nrouter.post(\"/add\", async (req, res) => {\n  const {\n    menuitemid,\n    quantity\n  } = req.body;\n  if (!menuitemid || !quantity) {\n    return res.status(400).json({\n      error: \"Missing fields\"\n    });\n  }\n  try {\n    const now = new Date();\n    await pool.query(`\n      INSERT INTO inventory (timestamp, menuitemid, quantity, restockdate, lastupdated)\n      VALUES ($1, $2, $3, $1, $1)\n    `, [now, menuitemid, quantity]);\n    res.json({\n      success: true\n    });\n  } catch (err) {\n    console.error(\"Error adding inventory:\", err);\n    res.status(500).json({\n      error: \"Failed to add inventory\"\n    });\n  }\n});\n\n// 删除库存记录\nrouter.delete(\"/delete\", async (req, res) => {\n  const {\n    inventoryid\n  } = req.body;\n  if (!inventoryid) {\n    return res.status(400).json({\n      error: \"Missing inventory ID\"\n    });\n  }\n  try {\n    await pool.query(\"DELETE FROM inventory WHERE inventoryid = $1\", [inventoryid]);\n    res.json({\n      success: true\n    });\n  } catch (err) {\n    console.error(\"Error deleting inventory:\", err);\n    res.status(500).json({\n      error: \"Failed to delete inventory\"\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","pool","get","req","res","result","query","json","rows","err","console","error","status","post","menuitemid","quantity","body","now","Date","success","delete","inventoryid","module","exports"],"sources":["/Users/faqiangmei/Desktop/react-fix-test/frontend/src/components/Inventory.js"],"sourcesContent":["// backend/routes/inventory.js\nconst express = require(\"express\");\nconst router = express.Router();\nconst pool = require(\"../db\");\n\n// 获取所有库存记录（包含 menuitem 名字）\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const result = await pool.query(`\n      SELECT \n        i.inventoryid,\n        i.quantity,\n        i.menuitemid,\n        m.itemname,\n        i.timestamp,\n        i.restockdate,\n        i.lastupdated\n      FROM inventory i\n      JOIN menuitem m ON i.menuitemid = m.itemid\n      ORDER BY i.inventoryid;\n    `);\n    res.json(result.rows);\n  } catch (err) {\n    console.error(\"Error fetching inventory:\", err);\n    res.status(500).json({ error: \"Failed to fetch inventory\" });\n  }\n});\n\n// 添加库存记录\nrouter.post(\"/add\", async (req, res) => {\n  const { menuitemid, quantity } = req.body;\n\n  if (!menuitemid || !quantity) {\n    return res.status(400).json({ error: \"Missing fields\" });\n  }\n\n  try {\n    const now = new Date();\n    await pool.query(`\n      INSERT INTO inventory (timestamp, menuitemid, quantity, restockdate, lastupdated)\n      VALUES ($1, $2, $3, $1, $1)\n    `, [now, menuitemid, quantity]);\n\n    res.json({ success: true });\n  } catch (err) {\n    console.error(\"Error adding inventory:\", err);\n    res.status(500).json({ error: \"Failed to add inventory\" });\n  }\n});\n\n// 删除库存记录\nrouter.delete(\"/delete\", async (req, res) => {\n  const { inventoryid } = req.body;\n\n  if (!inventoryid) {\n    return res.status(400).json({ error: \"Missing inventory ID\" });\n  }\n\n  try {\n    await pool.query(\"DELETE FROM inventory WHERE inventoryid = $1\", [inventoryid]);\n    res.json({ success: true });\n  } catch (err) {\n    console.error(\"Error deleting inventory:\", err);\n    res.status(500).json({ error: \"Failed to delete inventory\" });\n  }\n});\n\nmodule.exports = router;\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAMC,IAAI,GAAGH,OAAO,CAAC,OAAO,CAAC;;AAE7B;AACAC,MAAM,CAACG,GAAG,CAAC,GAAG,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAClC,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMJ,IAAI,CAACK,KAAK,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;IACFF,GAAG,CAACG,IAAI,CAACF,MAAM,CAACG,IAAI,CAAC;EACvB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEF,GAAG,CAAC;IAC/CL,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MAAEI,KAAK,EAAE;IAA4B,CAAC,CAAC;EAC9D;AACF,CAAC,CAAC;;AAEF;AACAZ,MAAM,CAACc,IAAI,CAAC,MAAM,EAAE,OAAOV,GAAG,EAAEC,GAAG,KAAK;EACtC,MAAM;IAAEU,UAAU;IAAEC;EAAS,CAAC,GAAGZ,GAAG,CAACa,IAAI;EAEzC,IAAI,CAACF,UAAU,IAAI,CAACC,QAAQ,EAAE;IAC5B,OAAOX,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MAAEI,KAAK,EAAE;IAAiB,CAAC,CAAC;EAC1D;EAEA,IAAI;IACF,MAAMM,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;IACtB,MAAMjB,IAAI,CAACK,KAAK,CAAC;AACrB;AACA;AACA,KAAK,EAAE,CAACW,GAAG,EAAEH,UAAU,EAAEC,QAAQ,CAAC,CAAC;IAE/BX,GAAG,CAACG,IAAI,CAAC;MAAEY,OAAO,EAAE;IAAK,CAAC,CAAC;EAC7B,CAAC,CAAC,OAAOV,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC;IAC7CL,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MAAEI,KAAK,EAAE;IAA0B,CAAC,CAAC;EAC5D;AACF,CAAC,CAAC;;AAEF;AACAZ,MAAM,CAACqB,MAAM,CAAC,SAAS,EAAE,OAAOjB,GAAG,EAAEC,GAAG,KAAK;EAC3C,MAAM;IAAEiB;EAAY,CAAC,GAAGlB,GAAG,CAACa,IAAI;EAEhC,IAAI,CAACK,WAAW,EAAE;IAChB,OAAOjB,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MAAEI,KAAK,EAAE;IAAuB,CAAC,CAAC;EAChE;EAEA,IAAI;IACF,MAAMV,IAAI,CAACK,KAAK,CAAC,8CAA8C,EAAE,CAACe,WAAW,CAAC,CAAC;IAC/EjB,GAAG,CAACG,IAAI,CAAC;MAAEY,OAAO,EAAE;IAAK,CAAC,CAAC;EAC7B,CAAC,CAAC,OAAOV,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEF,GAAG,CAAC;IAC/CL,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MAAEI,KAAK,EAAE;IAA6B,CAAC,CAAC;EAC/D;AACF,CAAC,CAAC;AAEFW,MAAM,CAACC,OAAO,GAAGxB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}