{"ast":null,"code":"const express = require(\"express\");\nconst cors = require(\"cors\");\nconst dotenv = require(\"dotenv\");\nconst {\n  Pool\n} = require(\"pg\");\ndotenv.config();\nconst app = express();\napp.use(cors());\napp.use(express.json());\n\n// PostgreSQL 连接配置\nconst pool = new Pool({\n  host: process.env.PSQL_HOST,\n  user: process.env.PSQL_USER,\n  database: process.env.PSQL_DATABASE,\n  password: process.env.PSQL_PASSWORD,\n  port: process.env.PSQL_PORT\n});\n\n// 提交订单接口\napp.post(\"/api/orders\", async (req, res) => {\n  const {\n    customerName,\n    userId,\n    items,\n    paymentMethod\n  } = req.body;\n  if (!customerName || !userId || !items || items.length === 0) {\n    return res.status(400).json({\n      success: false,\n      message: \"Missing order details\"\n    });\n  }\n  const client = await pool.connect();\n  try {\n    await client.query(\"BEGIN\");\n    const total = items.reduce((sum, item) => sum + parseFloat(item.price), 0);\n    const orderRes = await client.query(`INSERT INTO orders (customername, ordertotal, ordertimestamp, userid, rewards, paymentmethod)\n       VALUES ($1, $2, CURRENT_TIMESTAMP, $3, 0, $4) RETURNING orderid`, [customerName, total, userId, paymentMethod]);\n    const orderId = orderRes.rows[0].orderid;\n    for (const item of items) {\n      await client.query(`INSERT INTO transactions (sale_id, menu_item_id, quantity, price, paymentmethod, transactioncategory)\n         VALUES ($1, $2, 1, $3, $4, 'Sale')`, [orderId, item.itemid, item.price, paymentMethod]);\n    }\n    await client.query(\"COMMIT\");\n    res.json({\n      success: true,\n      orderId\n    });\n  } catch (err) {\n    await client.query(\"ROLLBACK\");\n    console.error(\"❌ Order Error:\", err);\n    res.status(500).json({\n      success: false,\n      message: \"Internal Server Error\"\n    });\n  } finally {\n    client.release();\n  }\n});\n\n// 启动服务器\nconst PORT = process.env.PORT || 5050;\napp.listen(PORT, () => {\n  console.log(`✅ Server running on http://localhost:${PORT}`);\n});","map":{"version":3,"names":["express","require","cors","dotenv","Pool","config","app","use","json","pool","host","process","env","PSQL_HOST","user","PSQL_USER","database","PSQL_DATABASE","password","PSQL_PASSWORD","port","PSQL_PORT","post","req","res","customerName","userId","items","paymentMethod","body","length","status","success","message","client","connect","query","total","reduce","sum","item","parseFloat","price","orderRes","orderId","rows","orderid","itemid","err","console","error","release","PORT","listen","log"],"sources":["/Users/faqiangmei/Desktop/react-fix-test/frontend/src/components/Cart.js"],"sourcesContent":["const express = require(\"express\");\nconst cors = require(\"cors\");\nconst dotenv = require(\"dotenv\");\nconst { Pool } = require(\"pg\");\n\ndotenv.config();\nconst app = express();\napp.use(cors());\napp.use(express.json());\n\n// PostgreSQL 连接配置\nconst pool = new Pool({\n  host: process.env.PSQL_HOST,\n  user: process.env.PSQL_USER,\n  database: process.env.PSQL_DATABASE,\n  password: process.env.PSQL_PASSWORD,\n  port: process.env.PSQL_PORT\n});\n\n// 提交订单接口\napp.post(\"/api/orders\", async (req, res) => {\n  const { customerName, userId, items, paymentMethod } = req.body;\n\n  if (!customerName || !userId || !items || items.length === 0) {\n    return res.status(400).json({ success: false, message: \"Missing order details\" });\n  }\n\n  const client = await pool.connect();\n\n  try {\n    await client.query(\"BEGIN\");\n\n    const total = items.reduce((sum, item) => sum + parseFloat(item.price), 0);\n\n    const orderRes = await client.query(\n      `INSERT INTO orders (customername, ordertotal, ordertimestamp, userid, rewards, paymentmethod)\n       VALUES ($1, $2, CURRENT_TIMESTAMP, $3, 0, $4) RETURNING orderid`,\n      [customerName, total, userId, paymentMethod]\n    );\n\n    const orderId = orderRes.rows[0].orderid;\n\n    for (const item of items) {\n      await client.query(\n        `INSERT INTO transactions (sale_id, menu_item_id, quantity, price, paymentmethod, transactioncategory)\n         VALUES ($1, $2, 1, $3, $4, 'Sale')`,\n        [orderId, item.itemid, item.price, paymentMethod]\n      );\n    }\n\n    await client.query(\"COMMIT\");\n    res.json({ success: true, orderId });\n  } catch (err) {\n    await client.query(\"ROLLBACK\");\n    console.error(\"❌ Order Error:\", err);\n    res.status(500).json({ success: false, message: \"Internal Server Error\" });\n  } finally {\n    client.release();\n  }\n});\n\n// 启动服务器\nconst PORT = process.env.PORT || 5050;\napp.listen(PORT, () => {\n  console.log(`✅ Server running on http://localhost:${PORT}`);\n});\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAM;EAAEG;AAAK,CAAC,GAAGH,OAAO,CAAC,IAAI,CAAC;AAE9BE,MAAM,CAACE,MAAM,CAAC,CAAC;AACf,MAAMC,GAAG,GAAGN,OAAO,CAAC,CAAC;AACrBM,GAAG,CAACC,GAAG,CAACL,IAAI,CAAC,CAAC,CAAC;AACfI,GAAG,CAACC,GAAG,CAACP,OAAO,CAACQ,IAAI,CAAC,CAAC,CAAC;;AAEvB;AACA,MAAMC,IAAI,GAAG,IAAIL,IAAI,CAAC;EACpBM,IAAI,EAAEC,OAAO,CAACC,GAAG,CAACC,SAAS;EAC3BC,IAAI,EAAEH,OAAO,CAACC,GAAG,CAACG,SAAS;EAC3BC,QAAQ,EAAEL,OAAO,CAACC,GAAG,CAACK,aAAa;EACnCC,QAAQ,EAAEP,OAAO,CAACC,GAAG,CAACO,aAAa;EACnCC,IAAI,EAAET,OAAO,CAACC,GAAG,CAACS;AACpB,CAAC,CAAC;;AAEF;AACAf,GAAG,CAACgB,IAAI,CAAC,aAAa,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC1C,MAAM;IAAEC,YAAY;IAAEC,MAAM;IAAEC,KAAK;IAAEC;EAAc,CAAC,GAAGL,GAAG,CAACM,IAAI;EAE/D,IAAI,CAACJ,YAAY,IAAI,CAACC,MAAM,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACG,MAAM,KAAK,CAAC,EAAE;IAC5D,OAAON,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACvB,IAAI,CAAC;MAAEwB,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAwB,CAAC,CAAC;EACnF;EAEA,MAAMC,MAAM,GAAG,MAAMzB,IAAI,CAAC0B,OAAO,CAAC,CAAC;EAEnC,IAAI;IACF,MAAMD,MAAM,CAACE,KAAK,CAAC,OAAO,CAAC;IAE3B,MAAMC,KAAK,GAAGV,KAAK,CAACW,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGE,UAAU,CAACD,IAAI,CAACE,KAAK,CAAC,EAAE,CAAC,CAAC;IAE1E,MAAMC,QAAQ,GAAG,MAAMT,MAAM,CAACE,KAAK,CACjC;AACN,uEAAuE,EACjE,CAACX,YAAY,EAAEY,KAAK,EAAEX,MAAM,EAAEE,aAAa,CAC7C,CAAC;IAED,MAAMgB,OAAO,GAAGD,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC,CAACC,OAAO;IAExC,KAAK,MAAMN,IAAI,IAAIb,KAAK,EAAE;MACxB,MAAMO,MAAM,CAACE,KAAK,CAChB;AACR,4CAA4C,EACpC,CAACQ,OAAO,EAAEJ,IAAI,CAACO,MAAM,EAAEP,IAAI,CAACE,KAAK,EAAEd,aAAa,CAClD,CAAC;IACH;IAEA,MAAMM,MAAM,CAACE,KAAK,CAAC,QAAQ,CAAC;IAC5BZ,GAAG,CAAChB,IAAI,CAAC;MAAEwB,OAAO,EAAE,IAAI;MAAEY;IAAQ,CAAC,CAAC;EACtC,CAAC,CAAC,OAAOI,GAAG,EAAE;IACZ,MAAMd,MAAM,CAACE,KAAK,CAAC,UAAU,CAAC;IAC9Ba,OAAO,CAACC,KAAK,CAAC,gBAAgB,EAAEF,GAAG,CAAC;IACpCxB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACvB,IAAI,CAAC;MAAEwB,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAwB,CAAC,CAAC;EAC5E,CAAC,SAAS;IACRC,MAAM,CAACiB,OAAO,CAAC,CAAC;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,MAAMC,IAAI,GAAGzC,OAAO,CAACC,GAAG,CAACwC,IAAI,IAAI,IAAI;AACrC9C,GAAG,CAAC+C,MAAM,CAACD,IAAI,EAAE,MAAM;EACrBH,OAAO,CAACK,GAAG,CAAC,wCAAwCF,IAAI,EAAE,CAAC;AAC7D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}