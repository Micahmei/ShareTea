{"ast":null,"code":"const express = require('express');\nconst app = express();\nconst pool = require('./db'); // 假设你在一个 db.js 文件中设置了数据库连接\nconst cors = require('cors');\napp.use(cors());\napp.use(express.json()); // 使服务器能够处理 JSON 数据\n\n// 获取所有库存记录（包含 menuitem 名字）\napp.get('/api/inventory', async (req, res) => {\n  try {\n    const result = await pool.query(`\n      SELECT \n        i.inventoryid,\n        i.quantity,\n        i.menuitemid,\n        m.itemname,\n        i.timestamp,\n        i.restockdate,\n        i.lastupdated\n      FROM inventory i\n      JOIN menuitem m ON i.menuitemid = m.itemid\n      ORDER BY i.inventoryid;\n    `);\n    res.json(result.rows);\n  } catch (err) {\n    console.error('Error fetching inventory:', err);\n    res.status(500).json({\n      error: 'Failed to fetch inventory'\n    });\n  }\n});\n\n// 添加库存记录\napp.post('/api/inventory/add', async (req, res) => {\n  const {\n    menuitemid,\n    quantity\n  } = req.body;\n  if (!menuitemid || !quantity) {\n    return res.status(400).json({\n      error: 'Missing fields'\n    });\n  }\n  try {\n    const now = new Date();\n    await pool.query(`\n      INSERT INTO inventory (timestamp, menuitemid, quantity, restockdate, lastupdated)\n      VALUES ($1, $2, $3, $1, $1)\n    `, [now, menuitemid, quantity]);\n    res.json({\n      success: true\n    });\n  } catch (err) {\n    console.error('Error adding inventory:', err);\n    res.status(500).json({\n      error: 'Failed to add inventory'\n    });\n  }\n});\n\n// 删除库存记录\napp.delete('/api/inventory/delete', async (req, res) => {\n  const {\n    inventoryid\n  } = req.body;\n  if (!inventoryid) {\n    return res.status(400).json({\n      error: 'Missing inventory ID'\n    });\n  }\n  try {\n    await pool.query('DELETE FROM inventory WHERE inventoryid = $1', [inventoryid]);\n    res.json({\n      success: true\n    });\n  } catch (err) {\n    console.error('Error deleting inventory:', err);\n    res.status(500).json({\n      error: 'Failed to delete inventory'\n    });\n  }\n});\n\n// 启动服务器\napp.listen(5050, () => {\n  console.log('Server running on port 5050');\n});","map":{"version":3,"names":["express","require","app","pool","cors","use","json","get","req","res","result","query","rows","err","console","error","status","post","menuitemid","quantity","body","now","Date","success","delete","inventoryid","listen","log"],"sources":["/Users/faqiangmei/Desktop/react-fix-test/frontend/src/components/Inventory.js"],"sourcesContent":["const express = require('express');\nconst app = express();\nconst pool = require('./db');  // 假设你在一个 db.js 文件中设置了数据库连接\nconst cors = require('cors');\napp.use(cors());\napp.use(express.json()); // 使服务器能够处理 JSON 数据\n\n// 获取所有库存记录（包含 menuitem 名字）\napp.get('/api/inventory', async (req, res) => {\n  try {\n    const result = await pool.query(`\n      SELECT \n        i.inventoryid,\n        i.quantity,\n        i.menuitemid,\n        m.itemname,\n        i.timestamp,\n        i.restockdate,\n        i.lastupdated\n      FROM inventory i\n      JOIN menuitem m ON i.menuitemid = m.itemid\n      ORDER BY i.inventoryid;\n    `);\n    res.json(result.rows);\n  } catch (err) {\n    console.error('Error fetching inventory:', err);\n    res.status(500).json({ error: 'Failed to fetch inventory' });\n  }\n});\n\n// 添加库存记录\napp.post('/api/inventory/add', async (req, res) => {\n  const { menuitemid, quantity } = req.body;\n\n  if (!menuitemid || !quantity) {\n    return res.status(400).json({ error: 'Missing fields' });\n  }\n\n  try {\n    const now = new Date();\n    await pool.query(`\n      INSERT INTO inventory (timestamp, menuitemid, quantity, restockdate, lastupdated)\n      VALUES ($1, $2, $3, $1, $1)\n    `, [now, menuitemid, quantity]);\n\n    res.json({ success: true });\n  } catch (err) {\n    console.error('Error adding inventory:', err);\n    res.status(500).json({ error: 'Failed to add inventory' });\n  }\n});\n\n// 删除库存记录\napp.delete('/api/inventory/delete', async (req, res) => {\n  const { inventoryid } = req.body;\n\n  if (!inventoryid) {\n    return res.status(400).json({ error: 'Missing inventory ID' });\n  }\n\n  try {\n    await pool.query('DELETE FROM inventory WHERE inventoryid = $1', [inventoryid]);\n    res.json({ success: true });\n  } catch (err) {\n    console.error('Error deleting inventory:', err);\n    res.status(500).json({ error: 'Failed to delete inventory' });\n  }\n});\n\n// 启动服务器\napp.listen(5050, () => {\n  console.log('Server running on port 5050');\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}