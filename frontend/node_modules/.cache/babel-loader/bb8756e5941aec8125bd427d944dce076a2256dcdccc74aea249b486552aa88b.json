{"ast":null,"code":"const express = require('express');\nconst {\n  Pool\n} = require('pg'); // PostgreSQL 客户端\nconst app = express();\nconst port = 3000;\n\n// 创建连接池\nconst pool = new Pool({\n  user: 'your_db_user',\n  // 数据库用户名\n  host: 'localhost',\n  // 数据库主机\n  database: 'team_72_db',\n  // 数据库名\n  password: 'your_db_password',\n  // 数据库密码\n  port: 5432 // PostgreSQL 默认端口\n});\n\n// Z-Report API endpoint\napp.get('/api/zreport', async (req, res) => {\n  const {\n    startHour,\n    endHour\n  } = req.query;\n\n  // 检查小时输入是否合理\n  if (parseInt(startHour) > parseInt(endHour)) {\n    return res.status(400).send('Start hour cannot be greater than end hour');\n  }\n\n  // SQL 查询，获取销售报告数据\n  const query = `\n    SELECT \n      EXTRACT(HOUR FROM s.SalesTimestamp) AS hour, \n      COUNT(DISTINCT t.id) AS total_transactions,\n      COALESCE(SUM(s.total_amount), 0) AS sales_revenue,\n      COALESCE(SUM(t.price * t.quantity), 0) AS total_sales,\n      COALESCE(SUM(t.price * t.quantity) * 0.08, 0) AS total_tax,  -- Assuming 8% tax\n      COALESCE(SUM(t.price * t.quantity) * 0.05, 0) AS service_charges, -- Assuming 5% service charge\n      COALESCE(SUM(CASE WHEN t.transactioncategory = 'Void' THEN ABS(t.price * t.quantity) ELSE 0 END), 0) AS voids,\n      COALESCE(SUM(CASE WHEN t.transactioncategory = 'Discard' THEN ABS(t.price * t.quantity) ELSE 0 END), 0) AS discards,\n      COALESCE(SUM(CASE WHEN o.rewards > 0 THEN o.rewards ELSE 0 END), 0) AS discounts,\n      STRING_AGG(DISTINCT e.employeename, ', ') AS employee_signatures,\n      STRING_AGG(DISTINCT t.paymentmethod, ', ') AS payment_methods\n    FROM Sales s\n    LEFT JOIN Transactions t ON s.id = t.sale_id\n    LEFT JOIN Orders o ON o.orderid = t.sale_id\n    LEFT JOIN Employee e ON e.employeeid = o.userid\n    WHERE DATE(s.SalesTimestamp) = CURRENT_DATE\n      AND EXTRACT(HOUR FROM s.SalesTimestamp) BETWEEN $1 AND $2\n    GROUP BY hour\n    ORDER BY hour;\n  `;\n  try {\n    const result = await pool.query(query, [startHour, endHour]);\n    res.json(result.rows); // 返回 JSON 数据\n  } catch (error) {\n    console.error('Error fetching Z-report data:', error);\n    res.status(500).send('Error fetching report data');\n  }\n});\n\n// 启动服务器\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","Pool","app","port","pool","user","host","database","password","get","req","res","startHour","endHour","query","parseInt","status","send","result","json","rows","error","console","listen","log"],"sources":["/Users/faqiangmei/Desktop/react-fix-test/frontend/src/components/ZReport.js"],"sourcesContent":["const express = require('express');\nconst { Pool } = require('pg'); // PostgreSQL 客户端\nconst app = express();\nconst port = 3000;\n\n// 创建连接池\nconst pool = new Pool({\n  user: 'your_db_user',  // 数据库用户名\n  host: 'localhost',      // 数据库主机\n  database: 'team_72_db', // 数据库名\n  password: 'your_db_password', // 数据库密码\n  port: 5432,             // PostgreSQL 默认端口\n});\n\n// Z-Report API endpoint\napp.get('/api/zreport', async (req, res) => {\n  const { startHour, endHour } = req.query;\n\n  // 检查小时输入是否合理\n  if (parseInt(startHour) > parseInt(endHour)) {\n    return res.status(400).send('Start hour cannot be greater than end hour');\n  }\n\n  // SQL 查询，获取销售报告数据\n  const query = `\n    SELECT \n      EXTRACT(HOUR FROM s.SalesTimestamp) AS hour, \n      COUNT(DISTINCT t.id) AS total_transactions,\n      COALESCE(SUM(s.total_amount), 0) AS sales_revenue,\n      COALESCE(SUM(t.price * t.quantity), 0) AS total_sales,\n      COALESCE(SUM(t.price * t.quantity) * 0.08, 0) AS total_tax,  -- Assuming 8% tax\n      COALESCE(SUM(t.price * t.quantity) * 0.05, 0) AS service_charges, -- Assuming 5% service charge\n      COALESCE(SUM(CASE WHEN t.transactioncategory = 'Void' THEN ABS(t.price * t.quantity) ELSE 0 END), 0) AS voids,\n      COALESCE(SUM(CASE WHEN t.transactioncategory = 'Discard' THEN ABS(t.price * t.quantity) ELSE 0 END), 0) AS discards,\n      COALESCE(SUM(CASE WHEN o.rewards > 0 THEN o.rewards ELSE 0 END), 0) AS discounts,\n      STRING_AGG(DISTINCT e.employeename, ', ') AS employee_signatures,\n      STRING_AGG(DISTINCT t.paymentmethod, ', ') AS payment_methods\n    FROM Sales s\n    LEFT JOIN Transactions t ON s.id = t.sale_id\n    LEFT JOIN Orders o ON o.orderid = t.sale_id\n    LEFT JOIN Employee e ON e.employeeid = o.userid\n    WHERE DATE(s.SalesTimestamp) = CURRENT_DATE\n      AND EXTRACT(HOUR FROM s.SalesTimestamp) BETWEEN $1 AND $2\n    GROUP BY hour\n    ORDER BY hour;\n  `;\n\n  try {\n    const result = await pool.query(query, [startHour, endHour]);\n    res.json(result.rows); // 返回 JSON 数据\n  } catch (error) {\n    console.error('Error fetching Z-report data:', error);\n    res.status(500).send('Error fetching report data');\n  }\n});\n\n// 启动服务器\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAM;EAAEC;AAAK,CAAC,GAAGD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;AAChC,MAAME,GAAG,GAAGH,OAAO,CAAC,CAAC;AACrB,MAAMI,IAAI,GAAG,IAAI;;AAEjB;AACA,MAAMC,IAAI,GAAG,IAAIH,IAAI,CAAC;EACpBI,IAAI,EAAE,cAAc;EAAG;EACvBC,IAAI,EAAE,WAAW;EAAO;EACxBC,QAAQ,EAAE,YAAY;EAAE;EACxBC,QAAQ,EAAE,kBAAkB;EAAE;EAC9BL,IAAI,EAAE,IAAI,CAAc;AAC1B,CAAC,CAAC;;AAEF;AACAD,GAAG,CAACO,GAAG,CAAC,cAAc,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC1C,MAAM;IAAEC,SAAS;IAAEC;EAAQ,CAAC,GAAGH,GAAG,CAACI,KAAK;;EAExC;EACA,IAAIC,QAAQ,CAACH,SAAS,CAAC,GAAGG,QAAQ,CAACF,OAAO,CAAC,EAAE;IAC3C,OAAOF,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,4CAA4C,CAAC;EAC3E;;EAEA;EACA,MAAMH,KAAK,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EAED,IAAI;IACF,MAAMI,MAAM,GAAG,MAAMd,IAAI,CAACU,KAAK,CAACA,KAAK,EAAE,CAACF,SAAS,EAAEC,OAAO,CAAC,CAAC;IAC5DF,GAAG,CAACQ,IAAI,CAACD,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;EACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrDV,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,4BAA4B,CAAC;EACpD;AACF,CAAC,CAAC;;AAEF;AACAf,GAAG,CAACqB,MAAM,CAACpB,IAAI,EAAE,MAAM;EACrBmB,OAAO,CAACE,GAAG,CAAC,sCAAsCrB,IAAI,EAAE,CAAC;AAC3D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}